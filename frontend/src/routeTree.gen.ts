/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResetCrossSigningImport } from './routes/reset-cross-signing'
import { Route as AccountImport } from './routes/_account'
import { Route as AccountIndexImport } from './routes/_account.index'
import { Route as DevicesSplatImport } from './routes/devices.$'
import { Route as ClientsIdImport } from './routes/clients.$id'
import { Route as PasswordRecoveryIndexImport } from './routes/password.recovery.index'
import { Route as PasswordChangeIndexImport } from './routes/password.change.index'
import { Route as AccountSessionsIndexImport } from './routes/_account.sessions.index'
import { Route as PasswordChangeSuccessImport } from './routes/password.change.success'
import { Route as EmailsIdVerifyImport } from './routes/emails.$id.verify'
import { Route as AccountSessionsBrowsersImport } from './routes/_account.sessions.browsers'
import { Route as AccountSessionsIdImport } from './routes/_account.sessions.$id'

// Create/Update Routes

const ResetCrossSigningRoute = ResetCrossSigningImport.update({
  path: '/reset-cross-signing',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  id: '/_account',
  getParentRoute: () => rootRoute,
} as any)

const AccountIndexRoute = AccountIndexImport.update({
  path: '/',
  getParentRoute: () => AccountRoute,
} as any)

const DevicesSplatRoute = DevicesSplatImport.update({
  path: '/devices/$',
  getParentRoute: () => rootRoute,
} as any)

const ClientsIdRoute = ClientsIdImport.update({
  path: '/clients/$id',
  getParentRoute: () => rootRoute,
} as any)

const PasswordRecoveryIndexRoute = PasswordRecoveryIndexImport.update({
  path: '/password/recovery/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/password.recovery.index.lazy').then((d) => d.Route),
)

const PasswordChangeIndexRoute = PasswordChangeIndexImport.update({
  path: '/password/change/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/password.change.index.lazy').then((d) => d.Route),
)

const AccountSessionsIndexRoute = AccountSessionsIndexImport.update({
  path: '/sessions/',
  getParentRoute: () => AccountRoute,
} as any)

const PasswordChangeSuccessRoute = PasswordChangeSuccessImport.update({
  path: '/password/change/success',
  getParentRoute: () => rootRoute,
} as any)

const EmailsIdVerifyRoute = EmailsIdVerifyImport.update({
  path: '/emails/$id/verify',
  getParentRoute: () => rootRoute,
} as any)

const AccountSessionsBrowsersRoute = AccountSessionsBrowsersImport.update({
  path: '/sessions/browsers',
  getParentRoute: () => AccountRoute,
} as any)

const AccountSessionsIdRoute = AccountSessionsIdImport.update({
  path: '/sessions/$id',
  getParentRoute: () => AccountRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_account': {
      id: '/_account'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/reset-cross-signing': {
      id: '/reset-cross-signing'
      path: '/reset-cross-signing'
      fullPath: '/reset-cross-signing'
      preLoaderRoute: typeof ResetCrossSigningImport
      parentRoute: typeof rootRoute
    }
    '/clients/$id': {
      id: '/clients/$id'
      path: '/clients/$id'
      fullPath: '/clients/$id'
      preLoaderRoute: typeof ClientsIdImport
      parentRoute: typeof rootRoute
    }
    '/devices/$': {
      id: '/devices/$'
      path: '/devices/$'
      fullPath: '/devices/$'
      preLoaderRoute: typeof DevicesSplatImport
      parentRoute: typeof rootRoute
    }
    '/_account/': {
      id: '/_account/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof AccountImport
    }
    '/_account/sessions/$id': {
      id: '/_account/sessions/$id'
      path: '/sessions/$id'
      fullPath: '/sessions/$id'
      preLoaderRoute: typeof AccountSessionsIdImport
      parentRoute: typeof AccountImport
    }
    '/_account/sessions/browsers': {
      id: '/_account/sessions/browsers'
      path: '/sessions/browsers'
      fullPath: '/sessions/browsers'
      preLoaderRoute: typeof AccountSessionsBrowsersImport
      parentRoute: typeof AccountImport
    }
    '/emails/$id/verify': {
      id: '/emails/$id/verify'
      path: '/emails/$id/verify'
      fullPath: '/emails/$id/verify'
      preLoaderRoute: typeof EmailsIdVerifyImport
      parentRoute: typeof rootRoute
    }
    '/password/change/success': {
      id: '/password/change/success'
      path: '/password/change/success'
      fullPath: '/password/change/success'
      preLoaderRoute: typeof PasswordChangeSuccessImport
      parentRoute: typeof rootRoute
    }
    '/_account/sessions/': {
      id: '/_account/sessions/'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof AccountSessionsIndexImport
      parentRoute: typeof AccountImport
    }
    '/password/change/': {
      id: '/password/change/'
      path: '/password/change'
      fullPath: '/password/change'
      preLoaderRoute: typeof PasswordChangeIndexImport
      parentRoute: typeof rootRoute
    }
    '/password/recovery/': {
      id: '/password/recovery/'
      path: '/password/recovery'
      fullPath: '/password/recovery'
      preLoaderRoute: typeof PasswordRecoveryIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  AccountRoute: AccountRoute.addChildren({
    AccountIndexRoute,
    AccountSessionsIdRoute,
    AccountSessionsBrowsersRoute,
    AccountSessionsIndexRoute,
  }),
  ResetCrossSigningRoute,
  ClientsIdRoute,
  DevicesSplatRoute,
  EmailsIdVerifyRoute,
  PasswordChangeSuccessRoute,
  PasswordChangeIndexRoute,
  PasswordRecoveryIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_account",
        "/reset-cross-signing",
        "/clients/$id",
        "/devices/$",
        "/emails/$id/verify",
        "/password/change/success",
        "/password/change/",
        "/password/recovery/"
      ]
    },
    "/_account": {
      "filePath": "_account.tsx",
      "children": [
        "/_account/",
        "/_account/sessions/$id",
        "/_account/sessions/browsers",
        "/_account/sessions/"
      ]
    },
    "/reset-cross-signing": {
      "filePath": "reset-cross-signing.tsx"
    },
    "/clients/$id": {
      "filePath": "clients.$id.tsx"
    },
    "/devices/$": {
      "filePath": "devices.$.tsx"
    },
    "/_account/": {
      "filePath": "_account.index.tsx",
      "parent": "/_account"
    },
    "/_account/sessions/$id": {
      "filePath": "_account.sessions.$id.tsx",
      "parent": "/_account"
    },
    "/_account/sessions/browsers": {
      "filePath": "_account.sessions.browsers.tsx",
      "parent": "/_account"
    },
    "/emails/$id/verify": {
      "filePath": "emails.$id.verify.tsx"
    },
    "/password/change/success": {
      "filePath": "password.change.success.tsx"
    },
    "/_account/sessions/": {
      "filePath": "_account.sessions.index.tsx",
      "parent": "/_account"
    },
    "/password/change/": {
      "filePath": "password.change.index.tsx"
    },
    "/password/recovery/": {
      "filePath": "password.recovery.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
