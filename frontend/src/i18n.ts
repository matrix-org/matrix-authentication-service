// Copyright 2023 The Matrix.org Foundation C.I.C.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {
  default as i18n,
  InitOptions,
  LanguageDetectorModule,
  BackendModule,
  ReadCallback,
  ResourceKey,
} from "i18next";
import { initReactI18next } from "react-i18next";

// This generates a map of locale names to their URL (based on import.meta.url), which looks like this:
// {
//   "../locales/en.json": "/whatever/assets/root/locales/en-aabbcc.json",
//   ...
// }
const locales = import.meta.glob<string>("../locales/*.json", {
  query: "?url",
  import: "default",
  eager: true,
});

const getLocaleUrl = (name: string): string | undefined =>
  locales[`../locales/${name}.json`];

const supportedLngs = Object.keys(locales).map(
  (url) => url.match(/\/([^/]+)\.json$/)![1],
);

// A simple language detector that reads the `lang` attribute from the HTML tag
const LanguageDetector = {
  type: "languageDetector",

  detect(): string | undefined {
    const htmlTag =
      typeof document !== "undefined" ? document.documentElement : null;

    if (htmlTag && typeof htmlTag.getAttribute === "function") {
      return htmlTag.getAttribute("lang") || undefined;
    }
  },
} satisfies LanguageDetectorModule;

// A backend that fetches the locale files from the URLs generated by the glob above
const Backend = {
  type: "backend",
  init(): void {},
  read(language: string, _namespace: string, callback: ReadCallback): void {
    (async function (): Promise<ResourceKey> {
      const url = getLocaleUrl(language);
      if (!url) {
        throw new Error(`Locale ${language} not found`);
      }

      const response = await fetch(url, {
        credentials: "omit",
        headers: {
          Accept: "application/json",
        },
      });

      if (!response.ok) {
        throw Error(`Failed to fetch ${url}`);
      }

      // XXX: we don't check the JSON shape here, which should be fine
      return await response.json();
    })().then(
      (data) => callback(null, data),
      (error) => callback(error, null),
    );
  },
} satisfies BackendModule;

i18n
  .use(Backend)
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    fallbackLng: "en",
    keySeparator: ".",
    pluralSeparator: ":",
    supportedLngs,
    interpolation: {
      escapeValue: false, // React has built-in XSS protections
    },
  } satisfies InitOptions);

import.meta.hot?.on("locales-update", () => {
  i18n.reloadResources().then(() => {
    i18n.changeLanguage(i18n.language);
  });
});

export default i18n;
