// Copyright 2022 The Matrix.org Foundation C.I.C.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Enums from the "OAuth Parameters" IANA registry
//! See <https://www.iana.org/assignments/jose/jose.xhtml>

// Do not edit this file manually

use parse_display::{Display, FromStr};
use schemars::JsonSchema;
use serde_with::{DeserializeFromStr, SerializeDisplay};

/// OAuth Access Token Type
///
/// Source: <https://www.iana.org/assignments/oauth-parameters/token-types.csv>
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    Display,
    FromStr,
    SerializeDisplay,
    DeserializeFromStr,
    JsonSchema,
)]
#[non_exhaustive]
pub enum OAuthAccessTokenType {
    /// `Bearer`
    #[schemars(rename = "Bearer")]
    #[display("Bearer")]
    Bearer,

    /// `N_A`
    #[schemars(rename = "N_A")]
    #[display("N_A")]
    Na,

    /// `PoP`
    #[schemars(rename = "PoP")]
    #[display("PoP")]
    PoP,

    /// An unknown value.
    #[display("{0}")]
    #[schemars(skip)]
    Unknown(String),
}

/// OAuth Authorization Endpoint Response Type
///
/// Source: <https://www.iana.org/assignments/oauth-parameters/endpoint.csv>
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    Display,
    FromStr,
    SerializeDisplay,
    DeserializeFromStr,
    JsonSchema,
)]
pub enum OAuthAuthorizationEndpointResponseType {
    /// `code`
    #[schemars(rename = "code")]
    #[display("code")]
    Code,

    /// `code id_token`
    #[schemars(rename = "code id_token")]
    #[display("code id_token")]
    CodeIdToken,

    /// `code id_token token`
    #[schemars(rename = "code id_token token")]
    #[display("code id_token token")]
    CodeIdTokenToken,

    /// `code token`
    #[schemars(rename = "code token")]
    #[display("code token")]
    CodeToken,

    /// `id_token`
    #[schemars(rename = "id_token")]
    #[display("id_token")]
    IdToken,

    /// `id_token token`
    #[schemars(rename = "id_token token")]
    #[display("id_token token")]
    IdTokenToken,

    /// `none`
    #[schemars(rename = "none")]
    #[display("none")]
    None,

    /// `token`
    #[schemars(rename = "token")]
    #[display("token")]
    Token,
}

/// OAuth Token Type Hint
///
/// Source: <https://www.iana.org/assignments/oauth-parameters/token-type-hint.csv>
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    Display,
    FromStr,
    SerializeDisplay,
    DeserializeFromStr,
    JsonSchema,
)]
#[non_exhaustive]
pub enum OAuthTokenTypeHint {
    /// `access_token`
    #[schemars(rename = "access_token")]
    #[display("access_token")]
    AccessToken,

    /// `refresh_token`
    #[schemars(rename = "refresh_token")]
    #[display("refresh_token")]
    RefreshToken,

    /// `pct`
    #[schemars(rename = "pct")]
    #[display("pct")]
    Pct,

    /// An unknown value.
    #[display("{0}")]
    #[schemars(skip)]
    Unknown(String),
}

/// OAuth Token Endpoint Authentication Method
///
/// Source: <https://www.iana.org/assignments/oauth-parameters/token-endpoint-auth-method.csv>
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    Display,
    FromStr,
    SerializeDisplay,
    DeserializeFromStr,
    JsonSchema,
)]
#[non_exhaustive]
pub enum OAuthClientAuthenticationMethod {
    /// `none`
    #[schemars(rename = "none")]
    #[display("none")]
    None,

    /// `client_secret_post`
    #[schemars(rename = "client_secret_post")]
    #[display("client_secret_post")]
    ClientSecretPost,

    /// `client_secret_basic`
    #[schemars(rename = "client_secret_basic")]
    #[display("client_secret_basic")]
    ClientSecretBasic,

    /// `client_secret_jwt`
    #[schemars(rename = "client_secret_jwt")]
    #[display("client_secret_jwt")]
    ClientSecretJwt,

    /// `private_key_jwt`
    #[schemars(rename = "private_key_jwt")]
    #[display("private_key_jwt")]
    PrivateKeyJwt,

    /// `tls_client_auth`
    #[schemars(rename = "tls_client_auth")]
    #[display("tls_client_auth")]
    TlsClientAuth,

    /// `self_signed_tls_client_auth`
    #[schemars(rename = "self_signed_tls_client_auth")]
    #[display("self_signed_tls_client_auth")]
    SelfSignedTlsClientAuth,

    /// An unknown value.
    #[display("{0}")]
    #[schemars(skip)]
    Unknown(String),
}

/// PKCE Code Challenge Method
///
/// Source: <https://www.iana.org/assignments/oauth-parameters/pkce-code-challenge-method.csv>
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    Display,
    FromStr,
    SerializeDisplay,
    DeserializeFromStr,
    JsonSchema,
)]
#[non_exhaustive]
pub enum PkceCodeChallengeMethod {
    /// `plain`
    #[schemars(rename = "plain")]
    #[display("plain")]
    Plain,

    /// `S256`
    #[schemars(rename = "S256")]
    #[display("S256")]
    S256,

    /// An unknown value.
    #[display("{0}")]
    #[schemars(skip)]
    Unknown(String),
}
